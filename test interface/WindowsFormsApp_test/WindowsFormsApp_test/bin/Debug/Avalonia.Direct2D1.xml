<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Direct2D1</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Direct2D1.Media.DrawingContextImpl">
            <summary>
            Draws using Direct2D1.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.#ctor(Avalonia.Rendering.IVisualBrushRenderer,Avalonia.Direct2D1.ILayerFactory,SharpDX.Direct2D1.RenderTarget,SharpDX.DXGI.SwapChain1,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.DrawingContextImpl"/> class.
            </summary>
            <param name="visualBrushRenderer">The visual brush renderer.</param>
            <param name="renderTarget">The render target to draw to.</param>
            <param name="layerFactory">
            An object to use to create layers. May be null, in which case a
            <see cref="T:Avalonia.Direct2D1.Media.WicRenderTargetBitmapImpl"/> will created when a new layer is requested.
            </param>
            <param name="swapChain">An optional swap chain associated with this drawing context.</param>
            <param name="finishedCallback">An optional delegate to be called when context is disposed.</param>
        </member>
        <member name="P:Avalonia.Direct2D1.Media.DrawingContextImpl.Transform">
            <summary>
            Gets the current transform of the drawing context.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.Clear(Avalonia.Media.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.Dispose">
            <summary>
            Ends a draw operation.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.DrawImage(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},System.Double,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Draws a bitmap image.
            </summary>
            <param name="source">The bitmap image.</param>
            <param name="opacity">The opacity to draw with.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.DrawImage(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},Avalonia.Media.IBrush,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws a bitmap image.
            </summary>
            <param name="source">The bitmap image.</param>
            <param name="opacityMask">The opacity mask to draw with.</param>
            <param name="opacityMaskRect">The destination rect for the opacity mask.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.DrawLine(Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The stroke pen.</param>
            <param name="p1">The first point of the line.</param>
            <param name="p2">The second point of the line.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Draws a geometry.
            </summary>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.DrawRectangle(Avalonia.Media.IPen,Avalonia.Rect,System.Single)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.DrawText(Avalonia.Media.IBrush,Avalonia.Point,Avalonia.Platform.IFormattedTextImpl)">
            <summary>
            Draws text.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="origin">The upper-left corner of the text.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.FillRectangle(Avalonia.Media.IBrush,Avalonia.Rect,System.Single)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.PushClip(Avalonia.Rect)">
            <summary>
            Pushes a clip rectange.
            </summary>
            <param name="clip">The clip rectangle.</param>
            <returns>A disposable used to undo the clip rectangle.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.PushOpacity(System.Double)">
            <summary>
            Pushes an opacity value.
            </summary>
            <param name="opacity">The opacity.</param>
            <returns>A disposable used to undo the opacity.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DrawingContextImpl.CreateBrush(Avalonia.Media.IBrush,Avalonia.Size)">
            <summary>
            Creates a Direct2D brush wrapper for a Avalonia brush.
            </summary>
            <param name="brush">The avalonia brush.</param>
            <param name="destinationSize">The size of the brush's target area.</param>
            <returns>The Direct2D brush wrapper.</returns>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.DWriteResourceFontFileEnumerator">
            <summary>
            Resource FontFileEnumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontFileEnumerator.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.FontFileLoader,SharpDX.DataPointer)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.DWriteResourceFontFileEnumerator"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="loader">The loader.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontFileEnumerator.SharpDX#DirectWrite#FontFileEnumerator#MoveNext">
            <summary>
            Advances to the next font file in the collection. When it is first created, the enumerator is positioned before the first element of the collection and the first call to MoveNext advances to the first file.
            </summary>
            <returns>
            the value TRUE if the enumerator advances to a file; otherwise, FALSE if the enumerator advances past the last file in the collection.
            </returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::MoveNext([Out] BOOL* hasCurrentFile)</unmanaged>
        </member>
        <member name="P:Avalonia.Direct2D1.Media.DWriteResourceFontFileEnumerator.SharpDX#DirectWrite#FontFileEnumerator#CurrentFontFile">
            <summary>
            Gets a reference to the current font file.
            </summary>
            <value></value>
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFile"/> object.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::GetCurrentFontFile([Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.DWriteResourceFontFileStream">
            <summary>
            This FontFileStream implementation is reading data from a <see cref="T:SharpDX.DataStream"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontFileStream.#ctor(SharpDX.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.DWriteResourceFontFileStream"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontFileStream.SharpDX#DirectWrite#FontFileStream#ReadFileFragment(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>
            Reads a fragment from a font file.
            </summary>
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized.</param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file.</param>
            <param name="fragmentSize">The size of the file fragment, in bytes.</param>
            <param name="fragmentContext">When this method returns, contains the address of</param>
            <remarks>
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:SharpDX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section.
            </remarks>
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out, Buffer] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontFileStream.SharpDX#DirectWrite#FontFileStream#ReleaseFileFragment(System.IntPtr)">
            <summary>
            Releases a fragment from a file.
            </summary>
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}.</param>
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontFileStream.SharpDX#DirectWrite#FontFileStream#GetFileSize">
            <summary>
            Obtains the total size of a file.
            </summary>
            <returns>the total size of the file.</returns>
            <remarks>
            Implementing GetFileSize() for asynchronously loaded font files may require downloading the complete file contents. Therefore, this method should be used only for operations that either require a complete font file to be loaded (for example, copying a font file) or that need to make decisions based on the value of the file size (for example, validation against a persisted file size).
            </remarks>
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontFileStream.SharpDX#DirectWrite#FontFileStream#GetLastWriteTime">
            <summary>
            Obtains the last modified time of the file.
            </summary>
            <returns>
            the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC).
            </returns>
            <remarks>
            The "last modified time" is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one.
            </remarks>
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontLoader.#ctor(SharpDX.DirectWrite.Factory,System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.DWriteResourceFontLoader"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="fontAssets"></param>
        </member>
        <member name="P:Avalonia.Direct2D1.Media.DWriteResourceFontLoader.Key">
            <summary>
            Gets the key used to identify the FontCollection as well as storing index for fonts.
            </summary>
            <value>The key.</value>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontLoader.SharpDX#DirectWrite#FontCollectionLoader#CreateEnumeratorFromKey(SharpDX.DirectWrite.Factory,SharpDX.DataPointer)">
            <summary>
            Creates a font file enumerator object that encapsulates a collection of font files. The font system calls back to this interface to create a font collection.
            </summary>
            <param name="factory">Pointer to the <see cref="T:SharpDX.DirectWrite.Factory"/> object that was used to create the current font collection.</param>
            <param name="collectionKey">A font collection key that uniquely identifies the collection of font files within the scope of the font collection loader being used. The buffer allocated for this key must be at least  the size, in bytes, specified by collectionKeySize.</param>
            <returns>
            a reference to the newly created font file enumerator.
            </returns>
            <unmanaged>HRESULT IDWriteFontCollectionLoader::CreateEnumeratorFromKey([None] IDWriteFactory* factory,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontFileEnumerator** fontFileEnumerator)</unmanaged>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.DWriteResourceFontLoader.SharpDX#DirectWrite#FontFileLoader#CreateStreamFromKey(SharpDX.DataPointer)">
            <summary>
            Creates a font file stream object that encapsulates an open file resource.
            </summary>
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize.</param>
            <returns>
            a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFileStream"/> object.
            </returns>
            <remarks>
            The resource is closed when the last reference to fontFileStream is released.
            </remarks>
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.EllipseGeometryImpl">
            <summary>
            A Direct2D implementation of a <see cref="T:Avalonia.Media.EllipseGeometry"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.EllipseGeometryImpl.#ctor(Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.StreamGeometryImpl"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.GeometryImpl">
            <summary>
            The platform-specific interface for <see cref="T:Avalonia.Media.Geometry"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Direct2D1.Media.GeometryImpl.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.GeometryImpl.GetRenderBounds(Avalonia.Media.IPen)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.GeometryImpl.FillContains(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.GeometryImpl.Intersect(Avalonia.Platform.IGeometryImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.GeometryImpl.StrokeContains(Avalonia.Media.IPen,Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.D2DBitmapImpl">
            <summary>
            A Direct2D Bitmap implementation that uses a GPU memory bitmap as its image.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.D2DBitmapImpl.#ctor(SharpDX.Direct2D1.Bitmap)">
            <summary>
            Initialize a new instance of the <see cref="T:Avalonia.Direct2D1.Media.BitmapImpl"/> class
            with a bitmap backed by GPU memory.
            </summary>
            <param name="d2DBitmap">The GPU bitmap.</param>
            <remarks>
            This bitmap must be either from the same render target,
            or if the render target is a <see cref="T:SharpDX.Direct2D1.DeviceContext"/>,
            the device associated with this context, to be renderable.
            </remarks>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.WicBitmapImpl">
            <summary>
            A WIC implementation of a <see cref="T:Avalonia.Media.Imaging.Bitmap"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.WicBitmapImpl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.WicBitmapImpl"/> class.
            </summary>
            <param name="fileName">The filename of the bitmap to load.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.WicBitmapImpl.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.WicBitmapImpl"/> class.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.WicBitmapImpl.#ctor(Avalonia.PixelSize,Avalonia.Vector,System.Nullable{Avalonia.Platform.PixelFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.WicBitmapImpl"/> class.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="pixelFormat">Pixel format</param>
        </member>
        <member name="P:Avalonia.Direct2D1.Media.WicBitmapImpl.WicImpl">
            <summary>
            Gets the WIC implementation of the bitmap.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.WicBitmapImpl.GetDirect2DBitmap(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Gets a Direct2D bitmap to use on the specified render target.
            </summary>
            <param name="renderTarget">The render target.</param>
            <returns>The Direct2D bitmap.</returns>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.LineGeometryImpl">
            <summary>
            A Direct2D implementation of a <see cref="T:Avalonia.Media.LineGeometry"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.LineGeometryImpl.#ctor(Avalonia.Point,Avalonia.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.StreamGeometryImpl"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.RectangleGeometryImpl">
            <summary>
            A Direct2D implementation of a <see cref="T:Avalonia.Media.RectangleGeometry"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.RectangleGeometryImpl.#ctor(Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.StreamGeometryImpl"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Direct2D1.Media.StreamGeometryImpl">
            <summary>
            A Direct2D implementation of a <see cref="T:Avalonia.Media.StreamGeometry"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.StreamGeometryImpl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.StreamGeometryImpl"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.StreamGeometryImpl.#ctor(SharpDX.Direct2D1.PathGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.StreamGeometryImpl"/> class.
            </summary>
            <param name="geometry">An existing Direct2D <see cref="T:SharpDX.Direct2D1.PathGeometry"/>.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.StreamGeometryImpl.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.StreamGeometryImpl.Open">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Direct2D1.Media.TransformedGeometryImpl.#ctor(SharpDX.Direct2D1.TransformedGeometry,Avalonia.Direct2D1.Media.GeometryImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.Media.StreamGeometryImpl"/> class.
            </summary>
            <param name="source">The source geometry.</param>
            <param name="geometry">An existing Direct2D <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/>.</param>
        </member>
        <member name="P:Avalonia.Direct2D1.Media.TransformedGeometryImpl.Transform">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Direct2D1.PrimitiveExtensions.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:Avalonia.Direct2D1.PrimitiveExtensions.Matrix3x2Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
        <member name="M:Avalonia.Direct2D1.PrimitiveExtensions.ToDirect2DStrokeStyle(Avalonia.Media.IPen,SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Converts a pen to a Direct2D stroke style.
            </summary>
            <param name="pen">The pen to convert.</param>
            <param name="renderTarget">The render target.</param>
            <returns>The Direct2D brush.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.PrimitiveExtensions.ToDirect2DStrokeStyle(Avalonia.Media.IPen,SharpDX.Direct2D1.Factory)">
            <summary>
            Converts a pen to a Direct2D stroke style.
            </summary>
            <param name="pen">The pen to convert.</param>
            <param name="factory">The factory associated with this resource.</param>
            <returns>The Direct2D brush.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.PrimitiveExtensions.ToDirect2D(Avalonia.Media.Color)">
            <summary>
            Converts a Avalonia <see cref="T:Avalonia.Media.Color"/> to Direct2D.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>The Direct2D color.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.PrimitiveExtensions.ToDirect2D(Avalonia.Matrix)">
            <summary>
            Converts a Avalonia <see cref="T:Avalonia.Matrix"/> to a Direct2D <see cref="T:SharpDX.Mathematics.Interop.RawMatrix3x2"/>
            </summary>
            <param name="matrix">The <see cref="T:Avalonia.Matrix"/>.</param>
            <returns>The <see cref="T:SharpDX.Mathematics.Interop.RawMatrix3x2"/>.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.PrimitiveExtensions.ToAvalonia(SharpDX.Mathematics.Interop.RawMatrix3x2)">
            <summary>
            Converts a Direct2D <see cref="T:SharpDX.Mathematics.Interop.RawMatrix3x2"/> to a Avalonia <see cref="T:Avalonia.Matrix"/>.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>a <see cref="T:Avalonia.Matrix"/>.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.PrimitiveExtensions.ToDirect2D(Avalonia.Rect)">
            <summary>
            Converts a Avalonia <see cref="T:Avalonia.Rect"/> to a Direct2D <see cref="T:SharpDX.Mathematics.Interop.RawRectangleF"/>
            </summary>
            <param name="rect">The <see cref="T:Avalonia.Rect"/>.</param>
            <returns>The <see cref="T:SharpDX.Mathematics.Interop.RawRectangleF"/>.</returns>
        </member>
        <member name="F:Avalonia.Direct2D1.RenderTarget._renderTarget">
            <summary>
            The render target.
            </summary>
        </member>
        <member name="M:Avalonia.Direct2D1.RenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Direct2D1.RenderTarget"/> class.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:Avalonia.Direct2D1.RenderTarget.CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer)">
            <summary>
            Creates a drawing context for a rendering session.
            </summary>
            <returns>An <see cref="T:Avalonia.Platform.IDrawingContextImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Direct2D1.SwapChainRenderTarget.CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer)">
            <summary>
            Creates a drawing context for a rendering session.
            </summary>
            <returns>An <see cref="T:Avalonia.Platform.IDrawingContextImpl"/>.</returns>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_TEXT">
            <summary>
            Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. Use this format for ANSI text.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_BITMAP">
            <summary>
            A handle to a bitmap
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_DIB">
            <summary>
            A memory object containing a BITMAPINFO structure followed by the bitmap bits.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_UNICODETEXT">
            <summary>
            Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.ClipboardFormat.CF_HDROP">
            <summary>
            A handle to type HDROP that identifies a list of files. 
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Length">
            <summary>
            The length of the structure, in bytes. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT).
            <para>
            GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly.
            </para>
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Flags">
            <summary>
            Specifies flags that control the position of the minimized window and the method by which the window is restored.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.ShowCmd">
            <summary>
            The current show state of the window.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.MinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.MaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.NormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="P:Avalonia.Win32.Interop.UnmanagedMethods.WINDOWPLACEMENT.Default">
            <summary>
            Gets the default (empty) value.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_MOVE">
            <summary>
            Movement has occurred. Cannot be combined with TOUCHEVENTF_DOWN.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_DOWN">
            <summary>
            The corresponding touch point was established through a new contact. Cannot be combined with TOUCHEVENTF_MOVE or TOUCHEVENTF_UP.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_UP">
            <summary>
            A touch point was removed.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_INRANGE">
            <summary>
            A touch point is in range. This flag is used to enable touch hover support on compatible hardware. Applications that do not want support for hover can ignore this flag.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_PRIMARY">
            <summary>
            Indicates that this TOUCHINPUT structure corresponds to a primary contact point. See the following text for more information on primary touch points.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_NOCOALESCE">
            <summary>
            When received using GetTouchInputInfo, this input was not coalesced.
            </summary>
        </member>
        <member name="F:Avalonia.Win32.Interop.UnmanagedMethods.TouchInputFlags.TOUCHEVENTF_PALM">
            <summary>
            The touch event came from the user's palm.
            </summary>
        </member>
        <member name="T:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc">
            <summary>
            This class represents an elliptical arc on a 2D plane.
            
            This class is adapted for use with WPF StreamGeometryContext, and needs to be created explicitly
            for each particular arc.
            
            Some helpers
            
            It can handle ellipses which are not aligned with the x and y reference axes of the plane,
            as well as their parts.
            
            Another improvement is that this class can handle degenerated cases like for example very 
            flat ellipses(semi-minor axis much smaller than semi-major axis) and drawing of very small 
            parts of such ellipses at very high magnification scales.This imply monitoring the drawing 
            approximation error for extremely small values.Such cases occur for example while drawing 
            orbits of comets near the perihelion.
            
            When the arc does not cover the complete ellipse, the lines joining the center of the 
            ellipse to the endpoints can optionally be included or not in the outline, hence allowing 
            to use it for pie-charts rendering. If these lines are not included, the curve is not 
            naturally closed.
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs2Low">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0 ≤ b/a ≤ 0.25
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs2High">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Safety2">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs3Low">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs3High">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Safety3">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Cx">
            <summary>
            Abscissa of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Cy">
            <summary>
            Ordinate of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.A">
            <summary>
            Semi-major axis
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.B">
            <summary>
            Semi-minor axis
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Theta">
            <summary>
            Orientation of the major axis with respect to the x axis
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._cosTheta">
            <summary>
            Pre-calculated cosine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._sinTheta">
            <summary>
            Pre-calculated sine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Eta1">
            <summary>
            Start angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Eta2">
            <summary>
            End angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.X1">
            <summary>
            Abscissa of the start point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Y1">
            <summary>
            Ordinate of the start point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.X2">
            <summary>
            Abscissa of the end point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Y2">
            <summary>
            Ordinate of the end point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.FirstFocusX">
            <summary>
            Abscissa of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.FirstFocusY">
            <summary>
            Ordinate of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SecondFocusX">
            <summary>
            Abscissa of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SecondFocusY">
            <summary>
            Ordinate of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._xLeft">
            <summary>
            Abscissa of the leftmost point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._yUp">
            <summary>
            Ordinate of the highest point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._width">
            <summary>
            Horizontal width of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._height">
            <summary>
            Vertical height of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.IsPieSlice">
            <summary>
            Indicator for center to endpoints line inclusion
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._maxDegree">
            <summary>
            Maximal degree for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._defaultFlatness">
            <summary>
            Default flatness for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.F">
            <summary>
            Indicator for semi-major axis significance (compared to semi-minor one).
            Computed by dividing the (A-B) difference by the value of A.
            This indicator is used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.E2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.G">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.G2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor">
            <summary>
            Builds an elliptical arc composed of the full unit circle around (0,0)
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SetMaxDegree(System.Int32)">
            <summary>
            Sets the maximal degree allowed for Bezier curve approximation.
            </summary>
            <param name="maxDegree">Maximal allowed degree (must be between 1 and 3)</param>
            <exception cref="T:System.ArgumentException">Thrown if maxDegree is not between 1 and 3</exception>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SetDefaultFlatness(System.Double)">
            <summary>
            Sets the default flatness for Bezier curve approximation
            </summary>
            <param name="defaultFlatness">default flatness (must be greater than 1e-10)</param>
            <exception cref="T:System.ArgumentException">Thrown if defaultFlatness is lower than 1e-10</exception>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeFocii">
            <summary>
            Computes the locations of the focii
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeEndPoints">
            <summary>
            Computes the locations of the endpoints
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeBounds">
            <summary>
            Computes the bounding box
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeDerivedFlatnessParameters">
            <summary>
            Computes the flatness parameters used in intersection tests
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.RationalFunction(System.Double,System.Double[])">
            <summary>
            Computes the value of a rational function.
            This method handles rational functions where the numerator is quadratic
            and the denominator is linear
            </summary>
            <param name="x">Abscissa for which the value should be computed</param>
            <param name="c">Coefficients array of the rational function</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.EstimateError(System.Int32,System.Double,System.Double)">
            <summary>
            Estimate the approximation error for a sub-arc of the instance
            </summary>
            <param name="degree">Degree of the Bezier curve to use (1, 2 or 3)</param>
            <param name="etaA">Start angle of the sub-arc</param>
            <param name="etaB">End angle of the sub-arc</param>
            <returns>Upper bound of the approximation error between the Bezier curve and the real ellipse</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.PointAt(System.Double)">
            <summary>
            Get the elliptical arc point for a given angular parameter
            </summary>
            <param name="lambda">Angular parameter for which point is desired</param> 
            <returns>The desired elliptical arc point location</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(System.Double,System.Double)">
            <summary>
            Tests if the specified coordinates are inside the closed shape formed by this arc.
            If this is not a pie, then a shape derived by adding a closing chord is considered.
            </summary>
            <param name="x">Abscissa of the test point</param>
            <param name="y">Ordinate of the test point</param>
            <returns>True if the specified coordinates are inside the closed shape of this arc</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.IntersectArc(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the arc
            </summary>
            <param name="xA">abscissa of the first point of the line segment</param>
            <param name="yA">ordinate of the first point of the line segment</param>
            <param name="xB">abscissa of the second point of the line segment</param>
            <param name="yB">ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Intersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if two line segments intersect
            </summary>
            <param name="x1">Abscissa of the first point of the first line segment</param>
            <param name="y1">Ordinate of the first point of the first line segment</param>
            <param name="x2">Abscissa of the second point of the first line segment</param>
            <param name="y2">Ordinate of the second point of the first line segment</param>
            <param name="xA">Abscissa of the first point of the second line segment</param>
            <param name="yA">Ordinate of the first point of the second line segment</param>
            <param name="xB">Abscissa of the second point of the second line segment</param>
            <param name="yB">Ordinate of the second point of the second line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.IntersectOutline(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the outline
            </summary>
            <param name="xA">Abscissa of the first point of the line segment</param>
            <param name="yA">Ordinate of the first point of the line segment</param>
            <param name="xB">Abscissa of the second point of the line segment</param>
            <param name="yB">Ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="x">Abscissa of the upper-left corner of the test rectangle</param>
            <param name="y">Ordinate of the upper-left corner of the test rectangle</param>
            <param name="w">Width of the test rectangle</param>
            <param name="h">Height of the test rectangle</param>
            <returns>true if the interior of a closed path derived from this arc entirely contains the specified rectangular area; false otherwise</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(Avalonia.Point)">
            <summary>
            Tests if a specified Point2D is inside the boundary of a closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="p">Test point</param>
            <returns>true if the specified point is inside a closed path derived from this arc</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(Avalonia.Rect)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="r">Test rectangle</param>
            <returns>True if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D; false otherwise</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.GetBounds">
            <summary>
            Returns an integer Rectangle that completely encloses the closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary> 
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.BuildArc(Avalonia.Platform.IStreamGeometryContextImpl)">
            <summary>
            Builds the arc outline using given StreamGeometryContext and default (max) Bezier curve degree and acceptable error of half a pixel (0.5)
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.BuildArc(Avalonia.Platform.IStreamGeometryContextImpl,System.Int32,System.Double,System.Boolean)">
            <summary>
            Builds the arc outline using given StreamGeometryContext
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
            <param name="degree">degree of the Bezier curve to use</param>
            <param name="threshold">acceptable error</param>
            <param name="openNewFigure">if true, a new figure will be started in the specified StreamGeometryContext</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.GetAngle(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Calculates the angle between two vectors
            </summary>
            <param name="v1">Vector V1</param>
            <param name="v2">Vector V2</param>
            <returns>The signed angle between v2 and v1</returns>
        </member>
        <member name="T:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SimpleMatrix">
            <summary>
            Simple matrix used for rotate transforms. 
            At some point I did not trust the WPF Matrix struct, and wrote my own simple one -_-
            This is supposed to be replaced with proper WPF Matrices everywhere
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.BuildArc(Avalonia.Platform.IStreamGeometryContextImpl,Avalonia.Point,Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,System.Boolean)">
            <summary>
            ArcTo Helper for StreamGeometryContext
            </summary>
            <param name="path">Target path</param>
            <param name="p1">Start point</param>
            <param name="p2">End point</param>
            <param name="size">Ellipse radii</param>
            <param name="theta">Ellipse theta (angle measured from the abscissa)</param>
            <param name="isLargeArc">Large Arc Indicator</param>
            <param name="clockwise">Clockwise direction flag</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Intersects(Avalonia.Rect)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
    </members>
</doc>
